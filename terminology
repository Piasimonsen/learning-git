GIT
is a version control system (VCS), alternatives are CVS, SVN, . Git works with distributed revision control, instead of working copies, everybody has a their own full clone of the repository, which allows faster dev. It tracks change sets and not version, it takes a snapshot but only saves new versions of the files which changed.
Git is a command line tool. its open source and based on unix. Github is the company, and a repository hosting service with a graphical interface for git.

3 STATES (OR 4)
There are three local states of the project and one remote state: (1) Working Copy  (2) Staging/Index (3) Local Repository (4) Remote Repository

(1) The working copy is where you make the code changes. (2) Staging/Index is where you add our changes - from staging you can pick change sets that you wanna commit to you (3) local repository, which is a full history of the project with all previous changes. The remote repositories can e.g. be located on Github, which makes it easier to collaborate on a project. If you wanna work on other repositories you can make a fork, and that copies the repository to another remote repository, when you wanna make changes to it you start by making a remote clone of the repository (clone [repository URL]).  

Working Copy -> (ADD) ->  Staging/Index -> (COMMIT) -> Local Repository -> (PUSH and open PULL REQUEST) -> Remote Repository
Working Copy <- (CHECKOUT) <-  Staging/Index <- (CLONE/PULL) <- Local Repository <- (CLONE/PULL) <- Remote Repository

WORKFLOW
A branch is a pointer to a commit, in git the default pointer is called master, and this pointer will automatically point to the latest commit made! Unless you create a new pointer (branch), the new pointer can point to other commits. The head pointed to commit on the branch that you are currently working on! 

When you wanna merge your changes into another branch you open a pull-request based on your branch. Normally somebody else will do a code review and thereafter merge or squash merge - squash merge means putting multiple commits into one commit. A branch is build on top of on commit, and while you make commits to one branch there might be other commits to the first branch, if you wanna bring these into you branch it is called; rebase. 
